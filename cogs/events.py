import discord
from discord.ext import commands, tasks
from datetime import datetime, timedelta
import pytz

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
THAI_TZ = pytz.timezone("Asia/Bangkok")

class EventManager(commands.Cog):
    """
    Cog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    """
    def __init__(self, bot):
        self.bot = bot
        self.events = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö {event_id: event_data}
        self.countdown_task.start()  # ‡πÄ‡∏£‡∏¥‡πà‡∏° Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á

    def cog_unload(self):
        """
        ‡∏´‡∏¢‡∏∏‡∏î Task ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cog ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
        """
        self.countdown_task.cancel()

    # ========================= TASK =========================
    @tasks.loop(minutes=1)
    async def countdown_task(self):
        """
        Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å..." ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        """
        now = datetime.now(THAI_TZ)
        for event_id, event in self.events.items():
            event_time = datetime.strptime(f"{event['date']} {event['time']}", "%d-%m-%Y %H:%M").replace(tzinfo=THAI_TZ)
            remaining = event_time - now

            if remaining.total_seconds() <= 0:
                # ‡∏´‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
                continue

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å..."
            channel = event["channel"]
            message = event["message"]
            embed = self.generate_event_embed(event_id)
            await message.edit(embed=embed)

    # ========================= COMMANDS =========================
    @commands.command(name="event_create", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà")
    async def event_create(self, interaction: discord.Interaction, name: str, date: str, time: str, max_participants: int, description: str):
        """
        ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
        """
        event_id = f"EV{len(self.events) + 1:03}"  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Event ID ‡πÄ‡∏ä‡πà‡∏ô EV001
        event_time = datetime.strptime(f"{date} {time}", "%d-%m-%Y %H:%M").replace(tzinfo=THAI_TZ)

        if event_time <= datetime.now(THAI_TZ):
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        self.events[event_id] = {
            "name": name,
            "date": date,
            "time": time,
            "max_participants": max_participants,
            "description": description,
            "participants": {"yes": [], "no": [], "maybe": []},
            "created_by": interaction.user,
            "channel": interaction.channel,
            "message": None
        }

        embed = self.generate_event_embed(event_id)
        view = EventView(self, event_id)

        message = await interaction.response.send_message(embed=embed, view=view)
        self.events[event_id]["message"] = await message.original_response()

    # ========================= HELPERS =========================
    def generate_event_embed(self, event_id):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        """
        event = self.events[event_id]
        now = datetime.now(THAI_TZ)
        event_time = datetime.strptime(f"{event['date']} {event['time']}", "%d-%m-%Y %H:%M").replace(tzinfo=THAI_TZ)
        remaining = event_time - now

        embed = discord.Embed(
            title=f"**[{event_id}] {event['name']}**",
            description=event["description"],
            color=discord.Color.blue()
        )
        embed.add_field(name="üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", value=f"{event['date']} | ‡πÄ‡∏ß‡∏•‡∏≤ {event['time']}", inline=False)
        embed.add_field(name="‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å", value=f"{remaining.days} ‡∏ß‡∏±‡∏ô {remaining.seconds // 3600} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", inline=False)
        embed.add_field(name="üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö", value=f"{len(event['participants']['yes'])} / {event['max_participants']} ‡∏Ñ‡∏ô", inline=False)
        embed.add_field(
            name="‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° | ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° | üîÑ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
            value=(
                f"{', '.join([f'@{p.display_name}' for p in event['participants']['yes']]) or '‡πÑ‡∏°‡πà‡∏°‡∏µ'} | "
                f"{', '.join([f'@{p.display_name}' for p in event['participants']['no']]) or '‡πÑ‡∏°‡πà‡∏°‡∏µ'} | "
                f"{', '.join([f'@{p.display_name}' for p in event['participants']['maybe']]) or '‡πÑ‡∏°‡πà‡∏°‡∏µ'}"
            ),
            inline=False
        )
        embed.set_footer(text=f"‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢: {event['created_by'].display_name}")
        return embed

class EventView(discord.ui.View):
    """
    View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    """
    def __init__(self, cog, event_id):
        super().__init__(timeout=None)
        self.cog = cog
        self.event_id = event_id

    @discord.ui.button(label="‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", style=discord.ButtonStyle.green)
    async def join(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_participation(interaction, "yes")

    @discord.ui.button(label="‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", style=discord.ButtonStyle.red)
    async def not_join(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_participation(interaction, "no")

    @discord.ui.button(label="üîÑ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", style=discord.ButtonStyle.blurple)
    async def maybe_join(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_participation(interaction, "maybe")

    async def update_participation(self, interaction: discord.Interaction, status: str):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        """
        event = self.cog.events[self.event_id]
        user = interaction.user

        # ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        for key in event["participants"]:
            if user in event["participants"][key]:
                event["participants"][key].remove(user)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        if status == "yes" and len(event["participants"]["yes"]) >= event["max_participants"]:
            await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            return

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        event["participants"][status].append(user)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Embed
        embed = self.cog.generate_event_embed(self.event_id)
        await interaction.response.edit_message(embed=embed, view=self)

async def setup(bot):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Cog ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ö‡∏≠‡∏ó
    """
    await bot.add_cog(EventManager(bot))