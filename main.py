import discord
from discord.ext import commands
from discord import app_commands
import os
import openai
from keep_alive import keep_alive
import asyncio
from datetime import datetime, timedelta
import pytz


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
event_data = {}

# Timezone ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
THAI_TZ = pytz.timezone("Asia/Bangkok")

# ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á
class ChannelSelect(discord.ui.Select):
    def __init__(self):
        options = []
        # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ
        for channel in interaction.guild.text_channels:
            options.append(discord.SelectOption(label=channel.name, value=str(channel.id)))

        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selected_channel = interaction.guild.get_channel(int(self.values[0]))
        await selected_channel.send(f"**‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà**: {self.event_data['title']}")

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        await interaction.response.send_message(f"‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á: {selected_channel.mention}", ephemeral=True)


class EventView(discord.ui.View):
    def __init__(self, event_id):
        super().__init__(timeout=None)
        self.event_id = event_id

    @discord.ui.button(label="‚úÖ ‡∏°‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô", style=discord.ButtonStyle.green)
    async def going(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["going"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="‚ùì ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏≤", style=discord.ButtonStyle.gray)
    async def maybe(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["maybe"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤", style=discord.ButtonStyle.red)
    async def not_going(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["not_going"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="üìù Edit", style=discord.ButtonStyle.blurple, row=1)
    async def edit_event(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üõ† ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤", ephemeral=True)

    @discord.ui.button(label="üóë Delete", style=discord.ButtonStyle.red, row=1)
    async def delete_event(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user == event_data[self.event_id]["creator"]:
            del event_data[self.event_id]
            await interaction.message.delete()
        else:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ", ephemeral=True)

    async def update_message(self, interaction):
        embed = generate_event_embed(self.event_id)
        await interaction.response.edit_message(embed=embed, view=self)

def clear_user_from_all(event_id, user):
    for group in ["going", "maybe", "not_going"]:
        event_data[event_id][group].discard(user)

def generate_event_embed(event_id):
    data = event_data[event_id]
    local_time = data['time'].astimezone(THAI_TZ)
    embed = discord.Embed(
        title=f"üìå Operation: {data['title']}",
        description=data["description"],
        color=discord.Color.dark_purple()
    )
    embed.add_field(name=f"‚úÖ Accepted ({len(data['going'])})",
                    value="\n".join(user.display_name for user in data["going"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name=f"‚ùå Declined ({len(data['not_going'])})",
                    value="\n".join(user.display_name for user in data["not_going"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name=f"‚ùì Tentative ({len(data['maybe'])})",
                    value="\n".join(user.display_name for user in data["maybe"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name="üïí Time",
                    value=f"{local_time.strftime('%d-%m-%Y %H:%M')} ‡∏ô. [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Google](https://calendar.google.com/calendar/render?action=TEMPLATE&text={data['title'].replace(' ', '+')}&dates={data['time'].strftime('%Y%m%dT%H%M00')}/{(data['time'] + timedelta(hours=2)).strftime('%Y%m%dT%H%M00')})",
                    inline=False)
    if "image_url" in data:
        embed.set_image(url=data["image_url"])
    embed.set_footer(text=f"Created by {data['creator'].display_name}")
    return embed

class ConfirmEventView(discord.ui.View):
    def __init__(self, title, description, event_time, image_url, user):
        super().__init__(timeout=60)
        self.title = title
        self.description = description
        self.event_time = event_time
        self.image_url = image_url
        self.user = user

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Confirm
        self.channel_select = ChannelSelect()
        self.add_item(self.channel_select)

    @discord.ui.button(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ", ephemeral=True)
            return

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selected_channel = interaction.guild.get_channel(int(self.channel_select.values[0]))
        event_id = len(event_data)
        event_data[event_id] = {
            "title": self.title,
            "description": self.description,
            "time": self.event_time,
            "going": set(),
            "maybe": set(),
            "not_going": set(),
            "notified": False,
            "creator": self.user,
            "image_url": self.image_url
        }
        embed = generate_event_embed(event_id)
        view = EventView(event_id)
        
        # ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        await selected_channel.send(embed=embed, view=view)

        await interaction.response.edit_message(content="‚úÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", embed=embed, view=view)

    @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ", ephemeral=True)
            return
        await interaction.response.edit_message(content="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß", embed=None, view=None)

@bot.tree.command(name="event", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà")
@app_commands.describe(title="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", description="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", time="‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 11-04-2025 18:30)", image_url="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
async def create_event(interaction: discord.Interaction, title: str, description: str, time: str, image_url: str = None):
    try:
        event_time = datetime.strptime(time, "%d-%m-%Y %H:%M")
        event_time = THAI_TZ.localize(event_time).astimezone(pytz.utc)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD-MM-YYYY HH:MM", ephemeral=True)
        return

    embed = discord.Embed(title="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á", description=description, color=discord.Color.teal())
    embed.add_field(name="üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", value=title, inline=False)
    embed.add_field(name="üïí ‡πÄ‡∏ß‡∏•‡∏≤", value=f"{event_time.astimezone(THAI_TZ).strftime('%d-%m-%Y %H:%M')} ‡∏ô.", inline=False)
    if image_url:
        embed.set_image(url=image_url)
    view = ConfirmEventView(title, description, event_time, image_url, interaction.user)
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# ==== ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ====

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f'‚úÖ Logged in as {bot.user}')
    activity = discord.Game(name="Arma 3 | 69RangerGTMCommunit")
    await bot.change_presence(status=discord.Status.online, activity=activity)

@bot.tree.command(name="ping", description="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def slash_ping(interaction: discord.Interaction):
    await interaction.response.send_message("‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà üü¢")

@bot.tree.command(name="help", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", color=discord.Color.blue())
    embed.add_field(name="/ping", value="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", inline=False)
    embed.add_field(name="/event", value="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö", inline=False)
    embed.add_field(name="/dm", value="‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Role (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", inline=False)
    embed.add_field(name="‡∏ñ‡∏≤‡∏° [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]", value="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡∏±‡∏ö AI", inline=False)
    embed.set_footer(text="69Ranger Gentleman Community Bot")
    await interaction.response.send_message(embed=embed, ephemeral=True)

# DM Broadcast (unchanged)... [‡∏¢‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô]
# ...

# ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏±‡∏ö
keep_alive()

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
TOKEN = os.getenv("DISCORD_TOKEN")
