import discord
from discord.ext import commands
from discord import app_commands
import os
import openai
from keep_alive import keep_alive
import asyncio
from datetime import datetime, timedelta

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
event_data = {}

class EventView(discord.ui.View):
    def __init__(self, event_id):
        super().__init__(timeout=None)
        self.event_id = event_id

    @discord.ui.button(label="‚úÖ ‡∏°‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô", style=discord.ButtonStyle.green)
    async def going(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["going"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="‚ùì ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏≤", style=discord.ButtonStyle.gray)
    async def maybe(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["maybe"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤", style=discord.ButtonStyle.red)
    async def not_going(self, interaction: discord.Interaction, button: discord.ui.Button):
        clear_user_from_all(self.event_id, interaction.user)
        event_data[self.event_id]["not_going"].add(interaction.user)
        await self.update_message(interaction)

    @discord.ui.button(label="üìù Edit", style=discord.ButtonStyle.blurple, row=1)
    async def edit_event(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üõ† ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤", ephemeral=True)

    @discord.ui.button(label="üóë Delete", style=discord.ButtonStyle.red, row=1)
    async def delete_event(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user == event_data[self.event_id]["creator"]:
            del event_data[self.event_id]
            await interaction.message.delete()
        else:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ", ephemeral=True)

    async def update_message(self, interaction):
        embed = generate_event_embed(self.event_id)
        await interaction.response.edit_message(embed=embed, view=self)

def clear_user_from_all(event_id, user):
    for group in ["going", "maybe", "not_going"]:
        event_data[event_id][group].discard(user)

def generate_event_embed(event_id):
    data = event_data[event_id]
    embed = discord.Embed(
        title=f"üìå Operation: {data['title']}",
        description=data["description"],
        color=discord.Color.dark_purple()
    )
    embed.add_field(name=f"‚úÖ Accepted ({len(data['going'])})",
                    value="\n".join(user.display_name for user in data["going"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name=f"‚ùå Declined ({len(data['not_going'])})",
                    value="\n".join(user.display_name for user in data["not_going"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name=f"‚ùì Tentative ({len(data['maybe'])})",
                    value="\n".join(user.display_name for user in data["maybe"]) or "‡πÑ‡∏°‡πà‡∏°‡∏µ", inline=True)
    embed.add_field(name="üïí Time",
                    value=f"{data['time'].strftime('%A %d %B %Y %H:%M')} [Add to Google](https://calendar.google.com/calendar/render?action=TEMPLATE&text={data['title'].replace(' ', '+')}&dates={data['time'].strftime('%Y%m%dT%H%M00')}/{(data['time'] + timedelta(hours=2)).strftime('%Y%m%dT%H%M00')})",
                    inline=False)
    if "image_url" in data:
        embed.set_image(url=data["image_url"])
    embed.set_footer(text=f"Created by {data['creator'].display_name}")
    return embed

@bot.tree.command(name="event", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà")
@app_commands.describe(title="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", description="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", time="‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 2025-04-11 18:30)", image_url="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
async def create_event(interaction: discord.Interaction, title: str, description: str, time: str, image_url: str = None):
    try:
        event_time = datetime.strptime(time, "%Y-%m-%d %H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: YYYY-MM-DD HH:MM", ephemeral=True)
        return

    event_id = len(event_data)
    event_data[event_id] = {
        "title": title,
        "description": description,
        "time": event_time,
        "going": set(),
        "maybe": set(),
        "not_going": set(),
        "notified": False,
        "creator": interaction.user,
        "image_url": image_url
    }

    embed = generate_event_embed(event_id)
    view = EventView(event_id)
    await interaction.response.send_message(embed=embed, view=view)

# ==== ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ====

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f'‚úÖ Logged in as {bot.user}')
    activity = discord.Game(name="Arma 3 | 69RangerGTMCommunit")
    await bot.change_presence(status=discord.Status.online, activity=activity)

@bot.tree.command(name="ping", description="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def slash_ping(interaction: discord.Interaction):
    await interaction.response.send_message("‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà üü¢")

@bot.tree.command(name="help", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", color=discord.Color.blue())
    embed.add_field(name="/ping", value="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", inline=False)
    embed.add_field(name="/event", value="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö", inline=False)
    embed.add_field(name="/dm", value="‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Role (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", inline=False)
    embed.add_field(name="‡∏ñ‡∏≤‡∏° [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]", value="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡∏±‡∏ö AI", inline=False)
    embed.set_footer(text="69Ranger Gentleman Community Bot")
    await interaction.response.send_message(embed=embed, ephemeral=True)

# DM Broadcast
class ConfirmView(discord.ui.View):
    def __init__(self, role, message, members):
        super().__init__(timeout=60)
        self.role = role
        self.message = message
        self.members = members

    @discord.ui.button(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(content="üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...", view=None)
        success = 0
        failed = 0
        for member in self.members:
            try:
                await member.send(self.message)
                success += 1
            except:
                failed += 1
            await asyncio.sleep(1)
        await interaction.followup.send(f"‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success} ‡∏Ñ‡∏ô\n‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {failed} ‡∏Ñ‡∏ô", ephemeral=True)

    @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(content="üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", view=None)

@bot.tree.command(name="dm", description="‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Role (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
@app_commands.describe(role="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á", message="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á")
async def dm(interaction: discord.Interaction, role: discord.Role, message: str):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)", ephemeral=True)
        return
    members = [m for m in role.members if not m.bot]
    if not members:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô Role ‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÑ‡∏î‡πâ", ephemeral=True)
        return
    view = ConfirmView(role, message, members)
    await interaction.response.send_message(
        f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö `{len(members)}` ‡∏Ñ‡∏ô‡πÉ‡∏ô Role `{role.name}` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\nüì® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:\n```{message}```",
        view=view,
        ephemeral=True
    )

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if message.content.startswith("‡∏ñ‡∏≤‡∏° "):
        question = message.content[4:].strip()
        await message.channel.send("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...")
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"},
                    {"role": "user", "content": question}
                ]
            )
            reply = response.choices[0].message['content']
            await message.channel.send(reply)
        except Exception as e:
            await message.channel.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    await bot.process_commands(message)

@bot.event
async def on_member_join(member):
    try:
        role_name = "Civilian"
        guild = member.guild
        role = discord.utils.get(guild.roles, name=role_name)
        if role:
            await member.add_roles(role)
            print(f"‚úÖ ‡πÉ‡∏´‡πâ Role '{role.name}' ‡∏Å‡∏±‡∏ö {member.name} ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Role ‡∏ä‡∏∑‡πà‡∏≠ '{role_name}'")
        welcome_message = ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!\n"
                           "‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà :)\n"
                           "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà <#1281566308097462335>\n"
                           "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà <#1349726875030913085>")
        await member.send(welcome_message)
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á {member.name}'s DM")
    except discord.Forbidden:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ {member.name} ‡πÑ‡∏î‡πâ")

# ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏±‡∏ö
keep_alive()

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
TOKEN = os.getenv("DISCORD_TOKEN")
bot.run(TOKEN)
